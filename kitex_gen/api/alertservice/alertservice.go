// Code generated by Kitex v0.0.8. DO NOT EDIT.

package alertservice

import (
	"alert/kitex_gen/api"
	"alert/kitex_gen/rpc_dto"
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return alertServiceServiceInfo
}

var alertServiceServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "AlertService"
	handlerType := (*api.AlertService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddAlert":    kitex.NewMethodInfo(addAlertHandler, newAlertServiceAddAlertArgs, newAlertServiceAddAlertResult, false),
		"SelectAlert": kitex.NewMethodInfo(selectAlertHandler, newAlertServiceSelectAlertArgs, newAlertServiceSelectAlertResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.0.8",
		Extra:           extra,
	}
	return svcInfo
}

func addAlertHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertServiceAddAlertArgs)

	err := handler.(api.AlertService).AddAlert(ctx, realArg.RuleId, realArg.Time, realArg.IndexNum)
	if err != nil {
		return err
	}

	return nil
}
func newAlertServiceAddAlertArgs() interface{} {
	return api.NewAlertServiceAddAlertArgs()
}

func newAlertServiceAddAlertResult() interface{} {
	return api.NewAlertServiceAddAlertResult()
}

func selectAlertHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertServiceSelectAlertArgs)
	realResult := result.(*api.AlertServiceSelectAlertResult)
	success, err := handler.(api.AlertService).SelectAlert(ctx, realArg.RuleId, realArg.StartTime, realArg.EndTime)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertServiceSelectAlertArgs() interface{} {
	return api.NewAlertServiceSelectAlertArgs()
}

func newAlertServiceSelectAlertResult() interface{} {
	return api.NewAlertServiceSelectAlertResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddAlert(ctx context.Context, ruleId int64, time string, indexNum map[int64]float64) (err error) {
	var _args api.AlertServiceAddAlertArgs
	_args.RuleId = ruleId
	_args.Time = time
	_args.IndexNum = indexNum
	var _result api.AlertServiceAddAlertResult
	if err = p.c.Call(ctx, "AddAlert", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) SelectAlert(ctx context.Context, ruleId int64, startTime string, endTime string) (r *rpc_dto.AlertsResponse, err error) {
	var _args api.AlertServiceSelectAlertArgs
	_args.RuleId = ruleId
	_args.StartTime = startTime
	_args.EndTime = endTime
	var _result api.AlertServiceSelectAlertResult
	if err = p.c.Call(ctx, "SelectAlert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
