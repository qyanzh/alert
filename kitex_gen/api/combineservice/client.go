// Code generated by Kitex v0.0.8. DO NOT EDIT.

package combineservice

import (
	"alert/kitex_gen/rpc_dto"
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	AddAlert(ctx context.Context, ruleCode string, time string, roomId int64, callOptions ...callopt.Option) (r *rpc_dto.ErrResponse, err error)
	SelectAlert(ctx context.Context, roomId int64, ruleCode string, startTime string, endTime string, callOptions ...callopt.Option) (r *rpc_dto.AlertsResponse, err error)
	SelectIndex(ctx context.Context, code string, callOptions ...callopt.Option) (r *rpc_dto.IndexResponse, err error)
	SelectAllIndex(ctx context.Context, callOptions ...callopt.Option) (r *rpc_dto.IndexsResponse, err error)
	AddIndex(ctx context.Context, name string, code string, indexType bool, content string, callOptions ...callopt.Option) (r *rpc_dto.IndexResponse, err error)
	DeleteIndex(ctx context.Context, code string, callOptions ...callopt.Option) (r *rpc_dto.ErrResponse, err error)
	UpdateIndex(ctx context.Context, index *rpc_dto.Index, callOptions ...callopt.Option) (r *rpc_dto.ErrResponse, err error)
	SelectRoomIndex(ctx context.Context, code []string, roomId int64, callOptions ...callopt.Option) (r *rpc_dto.MapIndexResponse, err error)
	SelectRule(ctx context.Context, code string, callOptions ...callopt.Option) (r *rpc_dto.RuleResponse, err error)
	SelectAllRule(ctx context.Context, callOptions ...callopt.Option) (r *rpc_dto.RulesResponse, err error)
	AddRule(ctx context.Context, roomId int64, name string, code string, ruleType bool, content string, callOptions ...callopt.Option) (r *rpc_dto.RuleResponse, err error)
	DeleteRule(ctx context.Context, code string, callOptions ...callopt.Option) (r *rpc_dto.ErrResponse, err error)
	UpdateRule(ctx context.Context, rule *rpc_dto.Rule, callOptions ...callopt.Option) (r *rpc_dto.ErrResponse, err error)
	SelectTask(ctx context.Context, code string, callOptions ...callopt.Option) (r *rpc_dto.TaskResponse, err error)
	AddTask(ctx context.Context, name string, code string, ruleCode string, frequency int64, callOptions ...callopt.Option) (r *rpc_dto.TaskResponse, err error)
	SelectRoomTask(ctx context.Context, roomId int64, callOptions ...callopt.Option) (r *rpc_dto.TasksResponse, err error)
	DeleteTask(ctx context.Context, code string, callOptions ...callopt.Option) (r *rpc_dto.ErrResponse, err error)
	UpdateTask(ctx context.Context, task *rpc_dto.Task, callOptions ...callopt.Option) (r *rpc_dto.ErrResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kCombineServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kCombineServiceClient struct {
	*kClient
}

func (p *kCombineServiceClient) AddAlert(ctx context.Context, ruleCode string, time string, roomId int64, callOptions ...callopt.Option) (r *rpc_dto.ErrResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddAlert(ctx, ruleCode, time, roomId)
}

func (p *kCombineServiceClient) SelectAlert(ctx context.Context, roomId int64, ruleCode string, startTime string, endTime string, callOptions ...callopt.Option) (r *rpc_dto.AlertsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SelectAlert(ctx, roomId, ruleCode, startTime, endTime)
}

func (p *kCombineServiceClient) SelectIndex(ctx context.Context, code string, callOptions ...callopt.Option) (r *rpc_dto.IndexResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SelectIndex(ctx, code)
}

func (p *kCombineServiceClient) SelectAllIndex(ctx context.Context, callOptions ...callopt.Option) (r *rpc_dto.IndexsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SelectAllIndex(ctx)
}

func (p *kCombineServiceClient) AddIndex(ctx context.Context, name string, code string, indexType bool, content string, callOptions ...callopt.Option) (r *rpc_dto.IndexResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddIndex(ctx, name, code, indexType, content)
}

func (p *kCombineServiceClient) DeleteIndex(ctx context.Context, code string, callOptions ...callopt.Option) (r *rpc_dto.ErrResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteIndex(ctx, code)
}

func (p *kCombineServiceClient) UpdateIndex(ctx context.Context, index *rpc_dto.Index, callOptions ...callopt.Option) (r *rpc_dto.ErrResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateIndex(ctx, index)
}

func (p *kCombineServiceClient) SelectRoomIndex(ctx context.Context, code []string, roomId int64, callOptions ...callopt.Option) (r *rpc_dto.MapIndexResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SelectRoomIndex(ctx, code, roomId)
}

func (p *kCombineServiceClient) SelectRule(ctx context.Context, code string, callOptions ...callopt.Option) (r *rpc_dto.RuleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SelectRule(ctx, code)
}

func (p *kCombineServiceClient) SelectAllRule(ctx context.Context, callOptions ...callopt.Option) (r *rpc_dto.RulesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SelectAllRule(ctx)
}

func (p *kCombineServiceClient) AddRule(ctx context.Context, roomId int64, name string, code string, ruleType bool, content string, callOptions ...callopt.Option) (r *rpc_dto.RuleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddRule(ctx, roomId, name, code, ruleType, content)
}

func (p *kCombineServiceClient) DeleteRule(ctx context.Context, code string, callOptions ...callopt.Option) (r *rpc_dto.ErrResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteRule(ctx, code)
}

func (p *kCombineServiceClient) UpdateRule(ctx context.Context, rule *rpc_dto.Rule, callOptions ...callopt.Option) (r *rpc_dto.ErrResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateRule(ctx, rule)
}

func (p *kCombineServiceClient) SelectTask(ctx context.Context, code string, callOptions ...callopt.Option) (r *rpc_dto.TaskResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SelectTask(ctx, code)
}

func (p *kCombineServiceClient) AddTask(ctx context.Context, name string, code string, ruleCode string, frequency int64, callOptions ...callopt.Option) (r *rpc_dto.TaskResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddTask(ctx, name, code, ruleCode, frequency)
}

func (p *kCombineServiceClient) SelectRoomTask(ctx context.Context, roomId int64, callOptions ...callopt.Option) (r *rpc_dto.TasksResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SelectRoomTask(ctx, roomId)
}

func (p *kCombineServiceClient) DeleteTask(ctx context.Context, code string, callOptions ...callopt.Option) (r *rpc_dto.ErrResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteTask(ctx, code)
}

func (p *kCombineServiceClient) UpdateTask(ctx context.Context, task *rpc_dto.Task, callOptions ...callopt.Option) (r *rpc_dto.ErrResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateTask(ctx, task)
}
