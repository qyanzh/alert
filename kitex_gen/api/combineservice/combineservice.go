// Code generated by Kitex v0.0.8. DO NOT EDIT.

package combineservice

import (
	"alert/kitex_gen/api"
	"alert/kitex_gen/rpc_dto"
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

type CombineService interface {
	api.AlertService
	api.IndexService
	api.RuleService
	api.TaskService
}

func serviceInfo() *kitex.ServiceInfo {
	return combineServiceServiceInfo
}

var combineServiceServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "CombineService"
	handlerType := (*CombineService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddAlert":        kitex.NewMethodInfo(addAlertHandler, newAlertServiceAddAlertArgs, newAlertServiceAddAlertResult, false),
		"SelectAlert":     kitex.NewMethodInfo(selectAlertHandler, newAlertServiceSelectAlertArgs, newAlertServiceSelectAlertResult, false),
		"SelectIndex":     kitex.NewMethodInfo(selectIndexHandler, newIndexServiceSelectIndexArgs, newIndexServiceSelectIndexResult, false),
		"SelectAllIndex":  kitex.NewMethodInfo(selectAllIndexHandler, newIndexServiceSelectAllIndexArgs, newIndexServiceSelectAllIndexResult, false),
		"AddIndex":        kitex.NewMethodInfo(addIndexHandler, newIndexServiceAddIndexArgs, newIndexServiceAddIndexResult, false),
		"DeleteIndex":     kitex.NewMethodInfo(deleteIndexHandler, newIndexServiceDeleteIndexArgs, newIndexServiceDeleteIndexResult, false),
		"UpdateIndex":     kitex.NewMethodInfo(updateIndexHandler, newIndexServiceUpdateIndexArgs, newIndexServiceUpdateIndexResult, false),
		"SelectRoomIndex": kitex.NewMethodInfo(selectRoomIndexHandler, newIndexServiceSelectRoomIndexArgs, newIndexServiceSelectRoomIndexResult, false),
		"SelectRule":      kitex.NewMethodInfo(selectRuleHandler, newRuleServiceSelectRuleArgs, newRuleServiceSelectRuleResult, false),
		"SelectAllRule":   kitex.NewMethodInfo(selectAllRuleHandler, newRuleServiceSelectAllRuleArgs, newRuleServiceSelectAllRuleResult, false),
		"AddRule":         kitex.NewMethodInfo(addRuleHandler, newRuleServiceAddRuleArgs, newRuleServiceAddRuleResult, false),
		"DeleteRule":      kitex.NewMethodInfo(deleteRuleHandler, newRuleServiceDeleteRuleArgs, newRuleServiceDeleteRuleResult, false),
		"UpdateRule":      kitex.NewMethodInfo(updateRuleHandler, newRuleServiceUpdateRuleArgs, newRuleServiceUpdateRuleResult, false),
		"SelectTask":      kitex.NewMethodInfo(selectTaskHandler, newTaskServiceSelectTaskArgs, newTaskServiceSelectTaskResult, false),
		"AddTask":         kitex.NewMethodInfo(addTaskHandler, newTaskServiceAddTaskArgs, newTaskServiceAddTaskResult, false),
		"SelectRoomTask":  kitex.NewMethodInfo(selectRoomTaskHandler, newTaskServiceSelectRoomTaskArgs, newTaskServiceSelectRoomTaskResult, false),
		"DeleteTask":      kitex.NewMethodInfo(deleteTaskHandler, newTaskServiceDeleteTaskArgs, newTaskServiceDeleteTaskResult, false),
		"UpdateTask":      kitex.NewMethodInfo(updateTaskHandler, newTaskServiceUpdateTaskArgs, newTaskServiceUpdateTaskResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	extra["combine_service"] = true
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.0.8",
		Extra:           extra,
	}
	return svcInfo
}

func addAlertHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertServiceAddAlertArgs)
	realResult := result.(*api.AlertServiceAddAlertResult)
	success, err := handler.(api.AlertService).AddAlert(ctx, realArg.RuleCode, realArg.Time, realArg.RoomId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertServiceAddAlertArgs() interface{} {
	return api.NewAlertServiceAddAlertArgs()
}

func newAlertServiceAddAlertResult() interface{} {
	return api.NewAlertServiceAddAlertResult()
}

func selectAlertHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertServiceSelectAlertArgs)
	realResult := result.(*api.AlertServiceSelectAlertResult)
	success, err := handler.(api.AlertService).SelectAlert(ctx, realArg.RoomId, realArg.RuleCode, realArg.StartTime, realArg.EndTime)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertServiceSelectAlertArgs() interface{} {
	return api.NewAlertServiceSelectAlertArgs()
}

func newAlertServiceSelectAlertResult() interface{} {
	return api.NewAlertServiceSelectAlertResult()
}

func selectIndexHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.IndexServiceSelectIndexArgs)
	realResult := result.(*api.IndexServiceSelectIndexResult)
	success, err := handler.(api.IndexService).SelectIndex(ctx, realArg.Code)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newIndexServiceSelectIndexArgs() interface{} {
	return api.NewIndexServiceSelectIndexArgs()
}

func newIndexServiceSelectIndexResult() interface{} {
	return api.NewIndexServiceSelectIndexResult()
}

func selectAllIndexHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*api.IndexServiceSelectAllIndexResult)
	success, err := handler.(api.IndexService).SelectAllIndex(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newIndexServiceSelectAllIndexArgs() interface{} {
	return api.NewIndexServiceSelectAllIndexArgs()
}

func newIndexServiceSelectAllIndexResult() interface{} {
	return api.NewIndexServiceSelectAllIndexResult()
}

func addIndexHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.IndexServiceAddIndexArgs)
	realResult := result.(*api.IndexServiceAddIndexResult)
	success, err := handler.(api.IndexService).AddIndex(ctx, realArg.Name, realArg.Code, realArg.IndexType, realArg.Content)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newIndexServiceAddIndexArgs() interface{} {
	return api.NewIndexServiceAddIndexArgs()
}

func newIndexServiceAddIndexResult() interface{} {
	return api.NewIndexServiceAddIndexResult()
}

func deleteIndexHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.IndexServiceDeleteIndexArgs)
	realResult := result.(*api.IndexServiceDeleteIndexResult)
	success, err := handler.(api.IndexService).DeleteIndex(ctx, realArg.Code)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newIndexServiceDeleteIndexArgs() interface{} {
	return api.NewIndexServiceDeleteIndexArgs()
}

func newIndexServiceDeleteIndexResult() interface{} {
	return api.NewIndexServiceDeleteIndexResult()
}

func updateIndexHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.IndexServiceUpdateIndexArgs)
	realResult := result.(*api.IndexServiceUpdateIndexResult)
	success, err := handler.(api.IndexService).UpdateIndex(ctx, realArg.Index)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newIndexServiceUpdateIndexArgs() interface{} {
	return api.NewIndexServiceUpdateIndexArgs()
}

func newIndexServiceUpdateIndexResult() interface{} {
	return api.NewIndexServiceUpdateIndexResult()
}

func selectRoomIndexHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.IndexServiceSelectRoomIndexArgs)
	realResult := result.(*api.IndexServiceSelectRoomIndexResult)
	success, err := handler.(api.IndexService).SelectRoomIndex(ctx, realArg.Code, realArg.RoomId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newIndexServiceSelectRoomIndexArgs() interface{} {
	return api.NewIndexServiceSelectRoomIndexArgs()
}

func newIndexServiceSelectRoomIndexResult() interface{} {
	return api.NewIndexServiceSelectRoomIndexResult()
}

func selectRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.RuleServiceSelectRuleArgs)
	realResult := result.(*api.RuleServiceSelectRuleResult)
	success, err := handler.(api.RuleService).SelectRule(ctx, realArg.Code)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRuleServiceSelectRuleArgs() interface{} {
	return api.NewRuleServiceSelectRuleArgs()
}

func newRuleServiceSelectRuleResult() interface{} {
	return api.NewRuleServiceSelectRuleResult()
}

func selectAllRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*api.RuleServiceSelectAllRuleResult)
	success, err := handler.(api.RuleService).SelectAllRule(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRuleServiceSelectAllRuleArgs() interface{} {
	return api.NewRuleServiceSelectAllRuleArgs()
}

func newRuleServiceSelectAllRuleResult() interface{} {
	return api.NewRuleServiceSelectAllRuleResult()
}

func addRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.RuleServiceAddRuleArgs)
	realResult := result.(*api.RuleServiceAddRuleResult)
	success, err := handler.(api.RuleService).AddRule(ctx, realArg.RoomId, realArg.Name, realArg.Code, realArg.RuleType, realArg.Content)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRuleServiceAddRuleArgs() interface{} {
	return api.NewRuleServiceAddRuleArgs()
}

func newRuleServiceAddRuleResult() interface{} {
	return api.NewRuleServiceAddRuleResult()
}

func deleteRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.RuleServiceDeleteRuleArgs)
	realResult := result.(*api.RuleServiceDeleteRuleResult)
	success, err := handler.(api.RuleService).DeleteRule(ctx, realArg.Code)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRuleServiceDeleteRuleArgs() interface{} {
	return api.NewRuleServiceDeleteRuleArgs()
}

func newRuleServiceDeleteRuleResult() interface{} {
	return api.NewRuleServiceDeleteRuleResult()
}

func updateRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.RuleServiceUpdateRuleArgs)
	realResult := result.(*api.RuleServiceUpdateRuleResult)
	success, err := handler.(api.RuleService).UpdateRule(ctx, realArg.Rule)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRuleServiceUpdateRuleArgs() interface{} {
	return api.NewRuleServiceUpdateRuleArgs()
}

func newRuleServiceUpdateRuleResult() interface{} {
	return api.NewRuleServiceUpdateRuleResult()
}

func selectTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.TaskServiceSelectTaskArgs)
	realResult := result.(*api.TaskServiceSelectTaskResult)
	success, err := handler.(api.TaskService).SelectTask(ctx, realArg.Code)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTaskServiceSelectTaskArgs() interface{} {
	return api.NewTaskServiceSelectTaskArgs()
}

func newTaskServiceSelectTaskResult() interface{} {
	return api.NewTaskServiceSelectTaskResult()
}

func addTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.TaskServiceAddTaskArgs)
	realResult := result.(*api.TaskServiceAddTaskResult)
	success, err := handler.(api.TaskService).AddTask(ctx, realArg.Name, realArg.Code, realArg.RuleCode, realArg.Frequency)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTaskServiceAddTaskArgs() interface{} {
	return api.NewTaskServiceAddTaskArgs()
}

func newTaskServiceAddTaskResult() interface{} {
	return api.NewTaskServiceAddTaskResult()
}

func selectRoomTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.TaskServiceSelectRoomTaskArgs)
	realResult := result.(*api.TaskServiceSelectRoomTaskResult)
	success, err := handler.(api.TaskService).SelectRoomTask(ctx, realArg.RoomId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTaskServiceSelectRoomTaskArgs() interface{} {
	return api.NewTaskServiceSelectRoomTaskArgs()
}

func newTaskServiceSelectRoomTaskResult() interface{} {
	return api.NewTaskServiceSelectRoomTaskResult()
}

func deleteTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.TaskServiceDeleteTaskArgs)
	realResult := result.(*api.TaskServiceDeleteTaskResult)
	success, err := handler.(api.TaskService).DeleteTask(ctx, realArg.Code)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTaskServiceDeleteTaskArgs() interface{} {
	return api.NewTaskServiceDeleteTaskArgs()
}

func newTaskServiceDeleteTaskResult() interface{} {
	return api.NewTaskServiceDeleteTaskResult()
}

func updateTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.TaskServiceUpdateTaskArgs)
	realResult := result.(*api.TaskServiceUpdateTaskResult)
	success, err := handler.(api.TaskService).UpdateTask(ctx, realArg.Task)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTaskServiceUpdateTaskArgs() interface{} {
	return api.NewTaskServiceUpdateTaskArgs()
}

func newTaskServiceUpdateTaskResult() interface{} {
	return api.NewTaskServiceUpdateTaskResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddAlert(ctx context.Context, ruleCode string, time string, roomId int64) (r *rpc_dto.ErrResponse, err error) {
	var _args api.AlertServiceAddAlertArgs
	_args.RuleCode = ruleCode
	_args.Time = time
	_args.RoomId = roomId
	var _result api.AlertServiceAddAlertResult
	if err = p.c.Call(ctx, "AddAlert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectAlert(ctx context.Context, roomId int64, ruleCode string, startTime string, endTime string) (r *rpc_dto.AlertsResponse, err error) {
	var _args api.AlertServiceSelectAlertArgs
	_args.RoomId = roomId
	_args.RuleCode = ruleCode
	_args.StartTime = startTime
	_args.EndTime = endTime
	var _result api.AlertServiceSelectAlertResult
	if err = p.c.Call(ctx, "SelectAlert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectIndex(ctx context.Context, code string) (r *rpc_dto.IndexResponse, err error) {
	var _args api.IndexServiceSelectIndexArgs
	_args.Code = code
	var _result api.IndexServiceSelectIndexResult
	if err = p.c.Call(ctx, "SelectIndex", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectAllIndex(ctx context.Context) (r *rpc_dto.IndexsResponse, err error) {
	var _args api.IndexServiceSelectAllIndexArgs
	var _result api.IndexServiceSelectAllIndexResult
	if err = p.c.Call(ctx, "SelectAllIndex", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddIndex(ctx context.Context, name string, code string, indexType bool, content string) (r *rpc_dto.IndexResponse, err error) {
	var _args api.IndexServiceAddIndexArgs
	_args.Name = name
	_args.Code = code
	_args.IndexType = indexType
	_args.Content = content
	var _result api.IndexServiceAddIndexResult
	if err = p.c.Call(ctx, "AddIndex", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteIndex(ctx context.Context, code string) (r *rpc_dto.ErrResponse, err error) {
	var _args api.IndexServiceDeleteIndexArgs
	_args.Code = code
	var _result api.IndexServiceDeleteIndexResult
	if err = p.c.Call(ctx, "DeleteIndex", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateIndex(ctx context.Context, index *rpc_dto.Index) (r *rpc_dto.ErrResponse, err error) {
	var _args api.IndexServiceUpdateIndexArgs
	_args.Index = index
	var _result api.IndexServiceUpdateIndexResult
	if err = p.c.Call(ctx, "UpdateIndex", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectRoomIndex(ctx context.Context, code []string, roomId int64) (r *rpc_dto.MapIndexResponse, err error) {
	var _args api.IndexServiceSelectRoomIndexArgs
	_args.Code = code
	_args.RoomId = roomId
	var _result api.IndexServiceSelectRoomIndexResult
	if err = p.c.Call(ctx, "SelectRoomIndex", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectRule(ctx context.Context, code string) (r *rpc_dto.RuleResponse, err error) {
	var _args api.RuleServiceSelectRuleArgs
	_args.Code = code
	var _result api.RuleServiceSelectRuleResult
	if err = p.c.Call(ctx, "SelectRule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectAllRule(ctx context.Context) (r *rpc_dto.RulesResponse, err error) {
	var _args api.RuleServiceSelectAllRuleArgs
	var _result api.RuleServiceSelectAllRuleResult
	if err = p.c.Call(ctx, "SelectAllRule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddRule(ctx context.Context, roomId int64, name string, code string, ruleType bool, content string) (r *rpc_dto.RuleResponse, err error) {
	var _args api.RuleServiceAddRuleArgs
	_args.RoomId = roomId
	_args.Name = name
	_args.Code = code
	_args.RuleType = ruleType
	_args.Content = content
	var _result api.RuleServiceAddRuleResult
	if err = p.c.Call(ctx, "AddRule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRule(ctx context.Context, code string) (r *rpc_dto.ErrResponse, err error) {
	var _args api.RuleServiceDeleteRuleArgs
	_args.Code = code
	var _result api.RuleServiceDeleteRuleResult
	if err = p.c.Call(ctx, "DeleteRule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRule(ctx context.Context, rule *rpc_dto.Rule) (r *rpc_dto.ErrResponse, err error) {
	var _args api.RuleServiceUpdateRuleArgs
	_args.Rule = rule
	var _result api.RuleServiceUpdateRuleResult
	if err = p.c.Call(ctx, "UpdateRule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectTask(ctx context.Context, code string) (r *rpc_dto.TaskResponse, err error) {
	var _args api.TaskServiceSelectTaskArgs
	_args.Code = code
	var _result api.TaskServiceSelectTaskResult
	if err = p.c.Call(ctx, "SelectTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddTask(ctx context.Context, name string, code string, ruleCode string, frequency int64) (r *rpc_dto.TaskResponse, err error) {
	var _args api.TaskServiceAddTaskArgs
	_args.Name = name
	_args.Code = code
	_args.RuleCode = ruleCode
	_args.Frequency = frequency
	var _result api.TaskServiceAddTaskResult
	if err = p.c.Call(ctx, "AddTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectRoomTask(ctx context.Context, roomId int64) (r *rpc_dto.TasksResponse, err error) {
	var _args api.TaskServiceSelectRoomTaskArgs
	_args.RoomId = roomId
	var _result api.TaskServiceSelectRoomTaskResult
	if err = p.c.Call(ctx, "SelectRoomTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTask(ctx context.Context, code string) (r *rpc_dto.ErrResponse, err error) {
	var _args api.TaskServiceDeleteTaskArgs
	_args.Code = code
	var _result api.TaskServiceDeleteTaskResult
	if err = p.c.Call(ctx, "DeleteTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTask(ctx context.Context, task *rpc_dto.Task) (r *rpc_dto.ErrResponse, err error) {
	var _args api.TaskServiceUpdateTaskArgs
	_args.Task = task
	var _result api.TaskServiceUpdateTaskResult
	if err = p.c.Call(ctx, "UpdateTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
