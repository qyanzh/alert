// Code generated by Kitex v0.0.8. DO NOT EDIT.

package ruleservice

import (
	"alert/kitex_gen/rpc_dto"
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SelectRule(ctx context.Context, code string, callOptions ...callopt.Option) (r *rpc_dto.RuleResponse, err error)
	SelectAllRule(ctx context.Context, callOptions ...callopt.Option) (r *rpc_dto.RulesResponse, err error)
	AddRule(ctx context.Context, roomId int64, name string, code string, ruleType bool, content string, callOptions ...callopt.Option) (r *rpc_dto.RuleResponse, err error)
	CheckRule(ctx context.Context, rule string, callOptions ...callopt.Option) (r *rpc_dto.CheckResponse, err error)
	DeleteRule(ctx context.Context, code string, callOptions ...callopt.Option) (err error)
	UpdateRule(ctx context.Context, rule *rpc_dto.Rule, callOptions ...callopt.Option) (err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kRuleServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kRuleServiceClient struct {
	*kClient
}

func (p *kRuleServiceClient) SelectRule(ctx context.Context, code string, callOptions ...callopt.Option) (r *rpc_dto.RuleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SelectRule(ctx, code)
}

func (p *kRuleServiceClient) SelectAllRule(ctx context.Context, callOptions ...callopt.Option) (r *rpc_dto.RulesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SelectAllRule(ctx)
}

func (p *kRuleServiceClient) AddRule(ctx context.Context, roomId int64, name string, code string, ruleType bool, content string, callOptions ...callopt.Option) (r *rpc_dto.RuleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddRule(ctx, roomId, name, code, ruleType, content)
}

func (p *kRuleServiceClient) CheckRule(ctx context.Context, rule string, callOptions ...callopt.Option) (r *rpc_dto.CheckResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckRule(ctx, rule)
}

func (p *kRuleServiceClient) DeleteRule(ctx context.Context, code string, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteRule(ctx, code)
}

func (p *kRuleServiceClient) UpdateRule(ctx context.Context, rule *rpc_dto.Rule, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateRule(ctx, rule)
}
