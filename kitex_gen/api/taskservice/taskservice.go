// Code generated by Kitex v0.0.8. DO NOT EDIT.

package taskservice

import (
	"alert/kitex_gen/api"
	"alert/kitex_gen/rpc_dto"
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return taskServiceServiceInfo
}

var taskServiceServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "TaskService"
	handlerType := (*api.TaskService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SelectTask":     kitex.NewMethodInfo(selectTaskHandler, newTaskServiceSelectTaskArgs, newTaskServiceSelectTaskResult, false),
		"AddTask":        kitex.NewMethodInfo(addTaskHandler, newTaskServiceAddTaskArgs, newTaskServiceAddTaskResult, false),
		"SelectRoomTask": kitex.NewMethodInfo(selectRoomTaskHandler, newTaskServiceSelectRoomTaskArgs, newTaskServiceSelectRoomTaskResult, false),
		"DeleteTask":     kitex.NewMethodInfo(deleteTaskHandler, newTaskServiceDeleteTaskArgs, newTaskServiceDeleteTaskResult, false),
		"UpdateTask":     kitex.NewMethodInfo(updateTaskHandler, newTaskServiceUpdateTaskArgs, newTaskServiceUpdateTaskResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.0.8",
		Extra:           extra,
	}
	return svcInfo
}

func selectTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.TaskServiceSelectTaskArgs)
	realResult := result.(*api.TaskServiceSelectTaskResult)
	success, err := handler.(api.TaskService).SelectTask(ctx, realArg.Code)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTaskServiceSelectTaskArgs() interface{} {
	return api.NewTaskServiceSelectTaskArgs()
}

func newTaskServiceSelectTaskResult() interface{} {
	return api.NewTaskServiceSelectTaskResult()
}

func addTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.TaskServiceAddTaskArgs)
	realResult := result.(*api.TaskServiceAddTaskResult)
	success, err := handler.(api.TaskService).AddTask(ctx, realArg.Name, realArg.Code, realArg.RuleCode, realArg.Frequency)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTaskServiceAddTaskArgs() interface{} {
	return api.NewTaskServiceAddTaskArgs()
}

func newTaskServiceAddTaskResult() interface{} {
	return api.NewTaskServiceAddTaskResult()
}

func selectRoomTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.TaskServiceSelectRoomTaskArgs)
	realResult := result.(*api.TaskServiceSelectRoomTaskResult)
	success, err := handler.(api.TaskService).SelectRoomTask(ctx, realArg.RoomId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTaskServiceSelectRoomTaskArgs() interface{} {
	return api.NewTaskServiceSelectRoomTaskArgs()
}

func newTaskServiceSelectRoomTaskResult() interface{} {
	return api.NewTaskServiceSelectRoomTaskResult()
}

func deleteTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.TaskServiceDeleteTaskArgs)
	realResult := result.(*api.TaskServiceDeleteTaskResult)
	success, err := handler.(api.TaskService).DeleteTask(ctx, realArg.Code)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTaskServiceDeleteTaskArgs() interface{} {
	return api.NewTaskServiceDeleteTaskArgs()
}

func newTaskServiceDeleteTaskResult() interface{} {
	return api.NewTaskServiceDeleteTaskResult()
}

func updateTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.TaskServiceUpdateTaskArgs)
	realResult := result.(*api.TaskServiceUpdateTaskResult)
	success, err := handler.(api.TaskService).UpdateTask(ctx, realArg.Task)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTaskServiceUpdateTaskArgs() interface{} {
	return api.NewTaskServiceUpdateTaskArgs()
}

func newTaskServiceUpdateTaskResult() interface{} {
	return api.NewTaskServiceUpdateTaskResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SelectTask(ctx context.Context, code string) (r *rpc_dto.TaskResponse, err error) {
	var _args api.TaskServiceSelectTaskArgs
	_args.Code = code
	var _result api.TaskServiceSelectTaskResult
	if err = p.c.Call(ctx, "SelectTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddTask(ctx context.Context, name string, code string, ruleCode string, frequency int64) (r *rpc_dto.TaskResponse, err error) {
	var _args api.TaskServiceAddTaskArgs
	_args.Name = name
	_args.Code = code
	_args.RuleCode = ruleCode
	_args.Frequency = frequency
	var _result api.TaskServiceAddTaskResult
	if err = p.c.Call(ctx, "AddTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectRoomTask(ctx context.Context, roomId int64) (r *rpc_dto.TasksResponse, err error) {
	var _args api.TaskServiceSelectRoomTaskArgs
	_args.RoomId = roomId
	var _result api.TaskServiceSelectRoomTaskResult
	if err = p.c.Call(ctx, "SelectRoomTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTask(ctx context.Context, code string) (r *rpc_dto.ErrResponse, err error) {
	var _args api.TaskServiceDeleteTaskArgs
	_args.Code = code
	var _result api.TaskServiceDeleteTaskResult
	if err = p.c.Call(ctx, "DeleteTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTask(ctx context.Context, task *rpc_dto.Task) (r *rpc_dto.ErrResponse, err error) {
	var _args api.TaskServiceUpdateTaskArgs
	_args.Task = task
	var _result api.TaskServiceUpdateTaskResult
	if err = p.c.Call(ctx, "UpdateTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
